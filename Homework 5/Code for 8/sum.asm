sum:
.data
	odd: .asciz "Количество нечетных элементов массива: "
	even: .asciz "Количество четных элементов массива: "
.text
	sum_array:	
		lw a0 (t0)			# Загружаем в а0 значение по адресу t0
		mv s8, s3			# Запишем в регистр s8 промежуточное значение суммы
		add s3, s3, a0			# Добавим к счетчику суммы текущий элемент
		blt s8, zero, other		# Проверки на переполнение
		bgt s3, zero, ok 
		blt a0, zero, ok
		j error				# Если сумма была больше нуля, стала меньше нуля, а текущий элемент > 0 => произошло переполнение
		other:  blt s3, zero, ok 
			bgt a0, zero, ok	# Если сумма была меньше нуля, стала больше нуля, а текущий элемент < 0 => произошло переполнение
		error:	addi s11, s11, 1	# Положим в регистр s11 число 1, чтобы позднее понять, что была ошибка
			ret

		ok:
		addi t0, t0, 4			# Увеличение адреса на размер слова в байтах
		addi s2, s2, 1			# Увеличение счетчика, отвечающего за количество введенных элементов
		blt s2, s0, sum_array 		# Если счетчик меньше числа элементов, запускаем тело цикла еще раз
			
ret		
		


	
	
	

	 
